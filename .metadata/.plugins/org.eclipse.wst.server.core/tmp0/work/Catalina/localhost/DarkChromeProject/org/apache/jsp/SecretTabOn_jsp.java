/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2022-06-14 14:38:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;
import org.jsoup.*;
import com.google.gson.*;

public final class SecretTabOn_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("org.jsoup");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.google.gson");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"icon\" href=\"./resources/image/favicon-gray.svg\">\r\n");
      out.write("<link href=\"./resources/css/SecretTabOn.css\" rel=\"stylesheet\"\r\n");
      out.write("	type=\"text/css\">\r\n");
      out.write("<link href=\"./resources/css/common.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<title>새 탭</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	Cookie cok = new Cookie("DCTCookie", URLEncoder.encode("cookieonscreen", "utf-8"));
	cok.setMaxAge(60 * 60 * 24 * 30);
	response.addCookie(cok);
	
      out.write("\r\n");
      out.write("	<div class=\"content\">\r\n");
      out.write("		<div class=\"icon\" role=\"presentation\" alt=\"\"></div>\r\n");
      out.write("		<h1>어이쿠! 여기가 아니라고~?</h1>\r\n");
      out.write("		<p>\r\n");
      out.write("			<span>호기심도 많네. 원래대로 돌아가는건 구현하지않았다고~ 방금 화면으로 가고 싶다면 타사 쿠키 차단 버튼을 다시 눌러줘! 만약 이 웹의 정보를 보고 싶다면 아래를 봐줘!</span> <a target='_blank' class=\"link\"\r\n");
      out.write("				href=\"https://genshin.hoyoverse.com/ko/\">오늘의 추천게임</a>\r\n");
      out.write("		</p>\r\n");
      out.write("		<div id=\"bulletpoints-wrapper\">\r\n");
      out.write("			<div class=\"bulletpoints first\">\r\n");
      out.write("				<em>기여자 목록</em>\r\n");
      out.write("				<ul>\r\n");
      out.write("					<li>박승준</li>\r\n");
      out.write("					<li>김요한</li>\r\n");
      out.write("					<li>김승준</li>\r\n");
      out.write("				</ul>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"bulletpoints\">\r\n");
      out.write("				<em>사용된 라이브러리</em>\r\n");
      out.write("				<ul>\r\n");
      out.write("					<li><a target='_blank' class=\"link\" href=\"https://github.com/realityforge/javax.annotation\">Javax Annotation</a></li>\r\n");
      out.write("					<li><a target='_blank' class=\"link\" href=\"https://github.com/jhy/jsoup\">Jsoup</a></li>\r\n");
      out.write("					<li><a target='_blank' class=\"link\" href=\"https://github.com/google/gson\">Google Gson</a></li>\r\n");
      out.write("				</ul>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div id=\"cookie\">\r\n");
      out.write("			<div id=\"cookie-description\">\r\n");
      out.write("				<em>타사 쿠키 차단</em> 버튼을 다시 눌러서 원래 화면으로 돌아가도록 하자! 이 웹은 브라우저를 껐다켜도 있던 페이지 위치를 기억하고 있다고!\r\n");
      out.write("			</div>\r\n");
      out.write("			<form action=\"Connection\" method=\"post\">\r\n");
      out.write("				<input class=\"wrapper\" type=\"submit\" id=\"button\"> <label\r\n");
      out.write("					for=\"button\" class=\"button_label\"> <span class=\"button\"></span>\r\n");
      out.write("				</label>\r\n");
      out.write("			</form>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
