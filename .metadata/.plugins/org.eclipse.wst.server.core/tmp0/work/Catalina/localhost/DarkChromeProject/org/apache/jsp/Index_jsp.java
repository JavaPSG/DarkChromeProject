/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2022-06-17 00:16:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.github.javapsg.darkchrome.ConnectionData;
import org.jsoup.nodes.Document;
import java.net.URLDecoder;
import org.jsoup.*;
import com.google.gson.*;

public final class Index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("org.jsoup");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.google.gson");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.jsoup.nodes.Document");
    _jspx_imports_classes.add("com.github.javapsg.darkchrome.ConnectionData");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>새 탭</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

		Document doc1 = Jsoup.connect("https://api.ip.pe.kr/json/").ignoreContentType(true).get();
		String param1 = doc1.text();
		JsonParser parser1 = new JsonParser();
		JsonElement element1 = parser1.parse(param1);

		Document doc2 = Jsoup.connect("http://ip-api.com/json/" + element1.getAsJsonObject().get("ip").getAsString()
				+ "?fields=country,regionName,city").ignoreContentType(true).get();
		String param2 = doc2.text();
		JsonParser parser2 = new JsonParser();
		JsonElement element2 = parser2.parse(param2);

		ConnectionData cd = ConnectionData.getInstance();
		cd.setIp(element1.getAsJsonObject().get("ip").getAsString());
		cd.setCountry(element1.getAsJsonObject().get("country_name").getAsJsonObject().get("ko").getAsString());
		cd.setRegion(element2.getAsJsonObject().get("regionName").getAsString());
		cd.setCity(element2.getAsJsonObject().get("city").getAsString());
		Cookie[] cok = request.getCookies();
		if (cok != null && cok.length > 0) {
			for (int i = 0; i < cok.length; i++) {
				if (cok[i].getName().equals("DCTCookie") && cok[i].getValue() != null) {
					switch (URLDecoder.decode(cok[i].getValue(), "utf-8")) {
					case ("cookieoffscreen"): {
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      if (true) {
        _jspx_page_context.forward("SecretTabOff.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');
      out.write('	');

		break;
					}
					case ("cookieonscreen"): {
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      if (true) {
        _jspx_page_context.forward("SecretTabOn.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');
      out.write('	');

		break;
					}
					case ("cookiefirstscreen"): {
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      if (true) {
        _jspx_page_context.forward("SecretTabFirst.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');
      out.write('	');

		}
		default: {
			
      out.write("\r\n");
      out.write("			");
      if (true) {
        _jspx_page_context.forward("SecretTabFirst.jsp");
        return;
      }
      out.write("\r\n");
      out.write("			");

		}
					
					}
				}
				else{
					
      out.write("\r\n");
      out.write("					");
      if (true) {
        _jspx_page_context.forward("SecretTabFirst.jsp");
        return;
      }
      out.write("\r\n");
      out.write("					");

				}

			}
		}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
